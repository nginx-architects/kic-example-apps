apiVersion: v1
kind: Namespace
metadata:
  name: transportserver-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transportserver-app
  namespace: transportserver-app
  labels:
    app: transportserver-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transportserver-app
  template:
    metadata:
      labels:
        app: transportserver-app
    spec:
      containers:
      - name: transportserver-app
        image: nginxinc/nginx-unprivileged
        ports:
          - containerPort: 8443
            protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: "100Mi"
          requests:
            cpu: "0.1"
            memory: "20Mi"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: default-conf
          readOnly: true
        - mountPath: /etc/nginx/ssl
          name: secrets-volume          
      volumes:
      - name: default-conf
        configMap:
          name: nginx-echo
          items:
            - key: default.conf
              path: default.conf
      - name: secrets-volume
        secret:
           secretName: tls-certs              
---
apiVersion: v1
kind: Service
metadata:
  name: transportserver-app
  namespace: transportserver-app
spec:
  ports:
    - name: transportserver-app
      protocol: TCP
      port: 8443
      targetPort: 8443
  selector:
    app: transportserver-app
  type: ClusterIP
---
apiVersion: k8s.nginx.org/v1alpha1
kind: TransportServer
metadata:
  name: transportserver-app
  namespace: transportserver-app
spec:
  ingressClassName: nginx
  host: "hello-tls.k8s.nginx.rocks"
  listener:
    name: tls-passthrough
    protocol: TLS_PASSTHROUGH
  upstreams:
    - name: transportserver-app-upstream
      service: transportserver-app
      port: 8443
  action:
    pass: transportserver-app-upstream
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-echo
  namespace: transportserver-app
data:
  default.conf: |
    server {
        listen 8443 ssl http2;
        ssl_certificate /etc/nginx/ssl/fullchain1.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey1.pem;
        location / {
            default_type text/plain;
            expires -1;
            return 200 'Server address: $server_addr:$server_port\nServer name: $hostname\nDate: $time_local\nURI: $request_uri\nRequest ID: $request_id\nHost header: $Host\n';
        }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certs
  namespace: transportserver-app
type: Opaque
data:
  fullchain1.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZLRENDQkJDZ0F3SUJBZ0lTQk5HUmp5MXZwdXk5d2xKOHU2Q0NEWlB6TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEE1TWpNeE5ERXhORFJhRncweU1URXlNakl4TkRFeE5ETmFNQnd4R2pBWUJnTlZCQU1NCkVTb3Vhemh6TG01bmFXNTRMbkp2WTJ0ek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQXZwRGpRT3h1NTlVYTVQbFpUVTRwdk94dlMxNzRycWxpTTY4UVgzRjUxTFdxK2FWOHRyWFRtQUlUZy9PcgpvbmJ1bEFaTmlXSW9wRDFNT2NVSVFhbEE0N3lrUUFuODZ1WnhEd21NeUQxWHNwMFA5R3gxSkYwSzRseTBiRXFLClRFNWw1Ujc4QXFpL0JhN1JKUkR6aGJ0RFVZemRrUFVDUUlSVjBzMXlHR3FXbkx4VFMxM3B0Y25hMzZHUGJpTlkKVDVrV2NYdmNLMk9LcVBGUE11V3E0Z1hEMllKSDdJcHNhZ01VQXNzbXJtUXkzV3I3Um9YbmhqeFlUV0NVOWNWSwpSSGYzUEwxVGhFa3NQL1NYdTBPRy9TZXlqbHk2cnQwMU9FQk5BR0t6cFNMVFRzd0grTDd3ZFduRDZHOERubXFLCkF5MEJZVGlvK0NCcVprdGZ3Q3JkWnREZU13SURBUUFCbzRJQ1REQ0NBa2d3RGdZRFZSMFBBUUgvQkFRREFnV2cKTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUIwRwpBMVVkRGdRV0JCUmdlQnlNY05yNDV1UnZUbk03TWE5Z3RvYXZFREFmQmdOVkhTTUVHREFXZ0JRVUxyTVh0MWhXCnk2NVFDVURtSDYrZGl4VEN4akJWQmdnckJnRUZCUWNCQVFSSk1FY3dJUVlJS3dZQkJRVUhNQUdHRldoMGRIQTYKTHk5eU15NXZMbXhsYm1OeUxtOXlaekFpQmdnckJnRUZCUWN3QW9ZV2FIUjBjRG92TDNJekxta3ViR1Z1WTNJdQpiM0puTHpBY0JnTlZIUkVFRlRBVGdoRXFMbXM0Y3k1dVoybHVlQzV5YjJOcmN6Qk1CZ05WSFNBRVJUQkRNQWdHCkJtZUJEQUVDQVRBM0Jnc3JCZ0VFQVlMZkV3RUJBVEFvTUNZR0NDc0dBUVVGQndJQkZocG9kSFJ3T2k4dlkzQnoKTG14bGRITmxibU55ZVhCMExtOXlaekNDQVFRR0Npc0dBUVFCMW5rQ0JBSUVnZlVFZ2ZJQThBQjNBSDArOHZpUAovNGhWYUNUQ3dNcWVVb2w1SzhVT2VBbC9MbXFYYUpsK0l2RFhBQUFCZkJNMlpXMEFBQVFEQUVnd1JnSWhBSU92CnZVTit4c21aM1lacUhncVR5Y0htZ2N3dDlEN3Vmb2kvblZwRVhINlNBaUVBNFMrWWtiajN3azVxaEpadWRqRnEKK1ZyME52bWk5Z0I0c21LZzNPV2ZmN1FBZFFCRWxHVXVzTzdPcjhSQUI5aW8vaWpBMnVhQ3Z0akxNYlUvMHpPVwp0YmFCcUFBQUFYd1RObVZkQUFBRUF3QkdNRVFDSUM1elJnSmw3VnowdHhmdTRrZVpVNlFYYjRlaTJmNW91UW44Cm95TWMyMG0zQWlBL2tPTjNMUEovb053R0pZVEpXR0RjVHg2ZFlRdS9UTTRnVENyWWIva1RsVEFOQmdrcWhraUcKOXcwQkFRc0ZBQU9DQVFFQU5POUpYOHB0dnZIdDFLMWZZN3YxUWRJUXdsRkJWQ3FWa2NXUUNMU2Zza2dqMGh2Zwp6aDRIdnlWRE9pUWJGTlA5SGJlL1E2aVY0TGxmQTNId0VDM0hkWkJXUXMzTEswSU1HeFF5RVNjZG9meG1qS3BmCnBHS2o2MzN2dHBxYWdJYVFCdWNmOGFBcWdVMUJzZzBzalZNNWhLWTN2Q0llMm1RSFVnb2xJQzBvZGRkVzlPc2cKQUZBT0xYaENWZUZWWDlidzkrZGxqQnBZNXdEUU9zcjV3MExEN1A1d2FRdWFlSjlQN2FnTmd2Qi84ZEhrRGg4dQo0U0FONnZEUENIR1I5eml0Qk0zOUgxMFBNUU94RUZsZzZOWHhhZGRrNUVWYzlQaUwxck9NSG5BbnV5ajVlUVJPCktpendsU2dzaXJGSGNYV2ZJcVNVY3FQU3dBbXZFeW8raENjU0hRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRkZqQ0NBdjZnQXdJQkFnSVJBSkVyQ0VyUERCaW5VL2JXTGlXblgxb3dEUVlKS29aSWh2Y05BUUVMQlFBdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3SGhjTk1qQXdPVEEwTURBd01EQXcKV2hjTk1qVXdPVEUxTVRZd01EQXdXakF5TVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5UR1YwSjNNZwpSVzVqY25sd2RERUxNQWtHQTFVRUF4TUNVak13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM3QWhVb3pQYWdsTk1QRXV5TlZaTEQrSUx4bWFaNlFvaW5YU2FxdFN1NXhVeXhyNDVyK1hYSW85Y1AKUjVRVVZUVlhqSjZvb2prWjlZSThRcWxPYnZVN3d5N2JqY0N3WFBOWk9PZnR6Mm53V2dzYnZzQ1VKQ1dIK2pkeApzeFBuSEt6aG0rL2I1RHRGVWtXV3FjRlR6alRJVXU2MXJ1MlAzbUJ3NHFWVXE3WnREcGVsUURScks5TzhadXRtCk5IejZhNHVQVnltWitEQVhYYnB5Yi91QnhhM1NobGc5RjhmbkNidnhLL2VHM01IYWNWM1VSdVBNclNYQmlMeGcKWjNWbXMvRVk5NkpjNWxQL09vaTJSNlgvRXhqcW1BbDNQNTFUK2M4QjVmV21jQmNVcjJPay81bXprNTNjVTZjRwova2lGSGFGcHJpVjF1eFBNVWdQMTdWR2hpOXNWQWdNQkFBR2pnZ0VJTUlJQkJEQU9CZ05WSFE4QkFmOEVCQU1DCkFZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZnI1MkxGTUxHTUI4R0ExVWRJd1FZTUJhQQpGSG0wV2VaN3R1WGtBWE9BQ0lqSUdsajI2WnR1TURJR0NDc0dBUVVGQndFQkJDWXdKREFpQmdnckJnRUZCUWN3CkFvWVdhSFIwY0RvdkwzZ3hMbWt1YkdWdVkzSXViM0puTHpBbkJnTlZIUjhFSURBZU1CeWdHcUFZaGhab2RIUncKT2k4dmVERXVZeTVzWlc1amNpNXZjbWN2TUNJR0ExVWRJQVFiTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQgpndDhUQVFFQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQ0Z5azVIUHFQM2hVU0Z2TlZuZUxLWVk2MTFUUjZXClBUTmxjbFF0Z2FEcXcrMzRJTDlmekxkd0FMZHVPL1plbE43a0lKK203NHV5QStlaXRSWThrYzYwN1RrQzUzd2wKaWtmbVpXNC9SdlRaOE02VUsrNVV6aEs4akNkTHVNR1lMNkt2elhHUlNnaTN5TGdqZXdRdENQa0lWejZEMlFRegpDa2NoZUFtQ0o4TXF5SnU1emx6eVpNakF2bm5BVDQ1dFJBeGVrcnN1OTRzUTRlZ2RSQ25iV1NEdFk3a2grQkltCmxKTlhvQjFsQk1FS0lxNFFEVU9Yb1JnZmZ1RGdoamUxV3JHOU1MK0hiaXNxL3lGT0d3WEQ5UmlYOEY2c3c2VzQKYXZBdXZEc3p1ZTVMM3N6ODVLK0VDNFkvd0ZWRE52Wm80VFlYYW82WjBmK2xRS2MwdDhEUVl6azFPWFZ1OHJwMgp5Sk1DNmFsTGJCZk9EQUxadllIN243ZG8xQVpsczRJOWQxUDRqbmtEclFveEIzVXFROWhWbDNMRUtRNzN4RjFPCnlLNUdoRERYOG9WZkdLRjV1K2RlY0lzSDRZYVR3N21QM0dGeEpTcXYzKzBsVUZKb2k1TGM1ZGExNDlwOTBJZHMKaENFeHJvTDErN21yeUlrWFBlRk01VGdPOXIwcnZaYUJGT3ZWMnowZ3AzNVowK0w0V1BsYnVFak4vbHhQRmluKwpIbFVqcjhnUnNJM3FmSk9RRnkvOXJLSUpSMFkvOE9td3QvOG9UV2d5MW1kZUhtbWprN2oxbllzdkM5SlNRNlp2Ck1sZGxUVEtCM3poVGhWMStYV1lwNnJqZDVKVzF6YlZXRWtMTnhFN0dKVGhFVUczc3pnQlZHUDdwU1dUVVRzcVgKbkxSYndIT29xN2hId2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGWURDQ0JFaWdBd0lCQWdJUVFBRjNJVGZVNlVLNDduYXFQR1FLdHpBTkJna3Foa2lHOXcwQkFRc0ZBREEvCk1TUXdJZ1lEVlFRS0V4dEVhV2RwZEdGc0lGTnBaMjVoZEhWeVpTQlVjblZ6ZENCRGJ5NHhGekFWQmdOVkJBTVQKRGtSVFZDQlNiMjkwSUVOQklGZ3pNQjRYRFRJeE1ERXlNREU1TVRRd00xb1hEVEkwTURrek1ERTRNVFF3TTFvdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3Z2dJaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUN0NkNSejlCUTM4NXVlSzFjb0hJZSszTGZmT0pDTWJqem1WNkI0OTNYQwpvdjcxYW03MkFFOG8yOTVvaG14RWs3YXhZLzBVRW11L0g5THFNWnNoZnRFelBMcEk5ZDE1MzdPNC94THhJWnBMCndZcUdjV2xLWm1ac2ozNDhjTCt0S1NJRzgrVEE1b0N1NGt1UHQ1bCtsQU9mMDBlWGZKbElJMVBvT0s1UENtK0QKTHRGSlY0eUFkTGJhTDlBNGpYc0RjQ0ViZGZJd1BQcVBydDNhWTZ2ckZrL0NqaEZMZnM4TDZQKzFkeTcwc250Swo0RXdTSlF4d2pRTXBvT0ZUSk93VDJlNFp2eEN6U293L2lhTmhVZDZzaHdlVTlHTng3QzdpYjF1WWdlR0pYRFI1CmJIYnZPNUJpZWViYnBKb3ZKc1hRRU9FTzN0a1FqaGI3dC9lbzk4ZmxBZ2VZanpZSWxlZmlONVlOTm5XZSt3NXkKc1IyYnZBUDVTUVhZZ2QwRnRDcldRZW1zQVhhVkNnL1kzOVc5RWg4MUx5Z1hiTktZd2FnSlpIZHVSemU2enF4WgpYbWlkZjNMV2ljVUdRU2srV1Q3ZEp2VWt5UkduV3FOTVFCOUdvWm0xcHpwUmJvWTdubjF5cHhJRmVGbnRQbEY0CkZRc0RqNDNRTHdXeVBudEtIRXR6QlJMOHh1cmdVQk44UTVOMHM4cDA1NDRmQVFqUU1OUmJjVGEwQjdyQk1EQmMKU0xlQ081aW1mV0NLb3FNcGdzeTZ2WU1FRzZLREEwR2gxZ1h4RzhLMjhLaDhoanRHcUVncWlOeDJtbmEvSDJxbApQUm1QNnpqelpON0lLdzBLS1AvMzIrSVZRdFFpMENkZDRYbitHT2R3aUsxTzV0bUxPc2JkSjFGdS83eGs5VE5EClR3SURBUUFCbzRJQlJqQ0NBVUl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FRWXcKU3dZSUt3WUJCUVVIQVFFRVB6QTlNRHNHQ0NzR0FRVUZCekFDaGk5b2RIUndPaTh2WVhCd2N5NXBaR1Z1ZEhKMQpjM1F1WTI5dEwzSnZiM1J6TDJSemRISnZiM1JqWVhnekxuQTNZekFmQmdOVkhTTUVHREFXZ0JURXA3R2tleXh4Cit0dmhTNUIxLzhRVllJV0pFREJVQmdOVkhTQUVUVEJMTUFnR0JtZUJEQUVDQVRBL0Jnc3JCZ0VFQVlMZkV3RUIKQVRBd01DNEdDQ3NHQVFVRkJ3SUJGaUpvZEhSd09pOHZZM0J6TG5KdmIzUXRlREV1YkdWMGMyVnVZM0o1Y0hRdQpiM0puTUR3R0ExVWRId1ExTURNd01hQXZvQzJHSzJoMGRIQTZMeTlqY213dWFXUmxiblJ5ZFhOMExtTnZiUzlFClUxUlNUMDlVUTBGWU0wTlNUQzVqY213d0hRWURWUjBPQkJZRUZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHUKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBS2N3QnNsbTcvRGxMUXJ0Mk01MW9HclMrbzQ0Ky95UW9ERlZEQwo1V3hDdTIrYjlMUlB3a1NJQ0hYTTZ3ZWJGR0p1ZU43c0o3bzVYUFdpb1c1V2xIQVFVN0c3NUsvUW9zTXJBZFNXCjlNVWdOVFA1MkdFMjRIR050TGkxcW9KRmxjRHlxU01vNTlhaHkyY0kycUJETEtvYmt4L0ozdldyYVYwVDlWdUcKV0NMS1RWWGtjR2R0d2xmRlJqbEJ6NHBZZzFodG1mNVg2RFlPOEE0anF2MklsOURqWEE2VVNiVzFGelhTTHI5TwpoZThZNElXUzZ3WTdiQ2tqQ1dEY1JRSk1FaGc3NmZzTzN0eEUrRmlZcnVxOVJVV2hpRjFteXY0UTZXK0N5QkZDCkRmdnA3T09HQU42ZEVPTTQrcVI5c2Rqb1NZS0VCcHNyNkd0UEFRdzRkeTc1M2VjNQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  privkey1.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQytrT05BN0c3bjFScmsKK1ZsTlRpbTg3RzlMWHZpdXFXSXpyeEJmY1huVXRhcjVwWHkydGRPWUFoT0Q4NnVpZHU2VUJrMkpZaWlrUFV3NQp4UWhCcVVEanZLUkFDZnpxNW5FUENZeklQVmV5blEvMGJIVWtYUXJpWExSc1NvcE1UbVhsSHZ3Q3FMOEZydEVsCkVQT0Z1ME5Sak4yUTlRSkFoRlhTelhJWWFwYWN2Rk5MWGVtMXlkcmZvWTl1STFoUG1SWnhlOXdyWTRxbzhVOHkKNWFyaUJjUFpna2ZzaW14cUF4UUN5eWF1WkRMZGF2dEdoZWVHUEZoTllKVDF4VXBFZC9jOHZWT0VTU3cvOUplNwpRNGI5SjdLT1hMcXUzVFU0UUUwQVlyT2xJdE5PekFmNHZ2QjFhY1BvYndPZWFvb0RMUUZoT0tqNElHcG1TMS9BCkt0MW0wTjR6QWdNQkFBRUNnZ0VBR2FxMElSdDNPSng0V2R6SHpXUzR0R3gzOVFQZXBNL0ZuVVo0QXhMcW9ONnoKSDVyTmVHSjNGR003TTZ1UE0zdW5XS0tjc09OYXEveGhsdXBWMlZvdGxqN2pOSWpqMnRPYzZMU1ZsS2JHZUJVMQpmK3RYdjhVVVlUYXhTbUNqemZGRlFoM3hQWDV5OUJYK3IycGdFbVFOaGg5ZC9GY3pyWExsaUZZSmh3WmNNTkhsCk5CRkRlRWc0QTUvU2k4K1ZmTFhFNEtyYmdtckFRcVY2VWJ4N0ZOaERuUkxqWEdGYTBWMTJuWWdlbTliRmwyamIKR2pkR2swdm9VdXVpYXNJOE9udzl6SEx3VUFVUjI3RUtyWnVGMVNvMVQxbEtlN3REWGljeThSN0N0VEdxSVlrZAp5UXg5Si83RkZQTnlhZ3VYSTdZNkxtbDNuTEFwRDFaOUpNTkVURmtxcVFLQmdRRGpaaFduVko2clp4YVVrTG13CkdjdVJneURPWStFYU5CMFVFZWxZYWg4Mk5JcVdHQ2hUS1hlelRhekVWTDZXSWhHd0NWS0VKM1JxWEpTLzN3SloKRHhjRE9vL1QyWVJLKy9xZ0hTMWNsbmEybWpwTHhQS0wwenkvZllqelhKSStyN1MxSmszUXVDSkF3VllUeC91UAp3MVQybXdQVlFSeHk0MnBQYXlKV0N6d3Rad0tCZ1FEV2lOYnU1VzB2YXR2VkZnVk5RR2o3Um5paGN2Mklab0o1CnZPQjA0bHROUUJXVlFVUEJ3dTNQbFA0RGtyWXdXS3ZZK0NwSm9RSGk1VmQzaEcySUsvQ0JKQTlCc085MVU4a1AKTFdFWUJlRzVBRVRWbStFN3NuMlhFcEJTdnBlQXFZMjZwT2FpUTFRUll1SlF6a2lwSDBzSnJzRUZpU1FidUY4dAo0TGxEdy9IOVZRS0JnQ3kzQ3pUL0w4QTJvanNPaG1UNWZZMGNndHZ5eWZYVUg0K3R3ZnZQeWxsblZZVVVOUUc5CldydFlYOHV2ZWxhZFZtc09PanFnWTRUeXRaRlJNZTMvU0tBcTZOTllwMm56U0tJcGVwMEZQVXpFNFFlN0w1S04KTkJuWGZwR1VOM0c2TFVlZHc1bHlTOUg5OG9ZclFlMVFGS24xYTNpSXVDWmpUNmxVUU1rNHBsbXJBb0dCQUo0RAp0a1BKcW8wbGFQdmZOMUo2SVprS2crbHV0LzBTZkFITXM0cUQrdm5BUE9WdFo4bThtTXF2bEJUdnA4K2VVQjBFClZLbGN0UFg1TkY1c3BQeUtXSi9WL29MRkh1ck5KcWRPSmxpNlpGS09OeVVhcG1BQkRPNE1GMDlLNEc0ODlJNUgKelRRdzRTZlpMSmFXQ2dDL2N0YVQ1OG43QkNTQ3ZXQWVTSGI0U1RIdEFvR0FKVG9ISy9xR0xZb2MxbHBSbG0vNQpTY2lVdHc2c1hvUHpNeC9EZEJmSWpNL2QxZys4TTVEOGtUUklGb25kZGZPamRjcnYrcktwZXdJRGRsYmRGdlBWCmhUSURneExia1NmRWxraE91WHlFckZLSmJhYkFUNllVQTdqdUgzUWNGSXYvWmpYRzJvVzcyM1RUd0M2M1M4SWcKcUxjazZBandWc3VSSHFQY1pHSkhLYUU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
